# Generated by CodiumAI

import pytest
from graph_data_generator.models.mapping import Mapping
from graph_data_generator.models.node_mapping import NodeMapping

class TestMapping:

    def test_empty_mapping_object_created_successfully(self):
        mapping = Mapping.empty()
        assert len(mapping.nodes) == 0
        assert len(mapping.relationships) == 0

    def test_mapping_object_with_nodes_and_relationships_created_successfully(self):
        node_mapping = NodeMapping.empty()
        nodes = {'node1': node_mapping}
        relationships = {}
        mapping = Mapping(nodes, relationships)
        assert mapping.nodes == nodes
        assert mapping.relationships == relationships

    # Tests that to_dict() method returns a dictionary with the correct format
    def test_to_dict_method_returns_dictionary_with_correct_format(self):
        node_mapping = NodeMapping.empty()
        nodes = {'node1': node_mapping}
        relationships = {}
        mapping = Mapping(nodes, relationships)
        result = mapping.to_dict()
        assert 'mapping' in result
        assert 'nodes' in result['mapping']
        assert 'relationships' in result['mapping']
        assert result['mapping']['nodes'] == {'node1': node_mapping.to_dict()}
        assert result['mapping']['relationships'] == {}

    # Tests that is_empty() method returns True for an empty Mapping object
    def test_is_empty_method_returns_true_for_empty_mapping_object(self):
        mapping = Mapping.empty()
        assert mapping.is_empty() == True

    # Tests that is_empty() method returns False for a Mapping object with nodes and/or relationships
    def test_is_empty_method_returns_false_for_mapping_object_with_nodes_or_relationships(self):
        node_mapping = NodeMapping.empty()
        nodes = {'node1': node_mapping}
        relationships = {}
        mapping = Mapping(nodes, relationships)
        assert mapping.is_empty() == False
        
        node_mapping2 = NodeMapping.empty()
        nodes2 = {}
        relationships2 = {'relationship1': node_mapping2}
        mapping2 = Mapping(nodes2, relationships2)
        assert mapping2.is_empty() == False

    # Tests that an invalid Mapping object is detected by is_valid() method
    def test_invalid_mapping_object_detected_by_is_valid_method(self):
        node_mapping = NodeMapping.empty()
        nodes = {'node1': node_mapping}
        relationships = {}
        mapping = Mapping(nodes, relationships)
        assert mapping.is_valid() == False
        
        node_mapping2 = NodeMapping.empty()
        nodes2 = {}
        relationships2 = {'relationship1': node_mapping2}
        mapping2 = Mapping(nodes2, relationships2)
        assert mapping2.is_valid() == False