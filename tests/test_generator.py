# Generated by CodiumAI

import pytest
from graph_data_generator.models.generator_type import GeneratorType
from graph_data_generator.models.generator import Generator

class TestGenerator:
    # Tests that a Generator object can be created with valid input parameters
    def test_create_generator(self):
        generator = Generator(
            name='Test Generator',
            type=GeneratorType.STRING,
            description='This is a test generator',
            code='test code',
            args=[],
            tags=[]
        )
        assert generator.name == 'Test Generator'
        assert generator.type == GeneratorType.STRING
        assert generator.description == 'This is a test generator'
        assert generator.code == 'test code'
        assert generator.args == []
        assert generator.tags == []

    # Tests that the to_dict method returns a dictionary representation of the Generator object
    def test_to_dict(self, sample_generators):
        test_code = sample_generators['uuid']
        generator = Generator(
            name='Test Generator',
            type=GeneratorType.STRING,
            description='This is a test generator',
            code=test_code,
            args=[],
            tags=[]
        )
        expected_dict = {
            'name': 'Test Generator',
            'description': 'This is a test generator',
            'code': "UUID",
            'args': [],
            'type': 'String',
            'tags': []
        }
        assert generator.to_dict() == expected_dict

    # Tests that an exception is raised when creating a Generator object without a name
    def test_missing_name(self):
        with pytest.raises(Exception) as e:
            _ = Generator(
                type=GeneratorType.STRING,
                description='This is a test generator',
                code='test code',
                args=[],
                tags=[]
            )
        assert str(e.value) is not None

    def test_missing_type(self):
        with pytest.raises(Exception) as e:
            _ = Generator(
                name='Test Generator',
                description='This is a test generator',
                code='test code',
                args=[],
                tags=[]
            )
        assert str(e.value) is not None

    def test_missing_description(self):
        with pytest.raises(Exception) as e:
            _ = Generator(
                name='Test Generator',
                type=GeneratorType.STRING,
                code='test code',
                args=[],
                tags=[]
            )
        assert str(e.value) is not None